#summary C++ Reference - argp
#labels Featured

= Header File =

{{{
#include <argp.h>
}}}

= Globals =

{{{
const char * argp_program_bug_address
}}}
  Should point to a string that will be printed at the end of the standard output for the '--help' option, embedded in a sentence that says 'Report bugs to _address_.'.

{{{
const char * argp_program_version
}}}
  Will add '--version' option when parsing with argp_parse, and the defined string will be printed. Or set the _argp_program_version_hook_ to a function of which the prototype is as follow:

{{{
void print-version (FILE *stream, struct argp_state *state)
}}}

= Example =

{{{
#include <argp.h>

const char * argp_program_bug_address = "<Lissy.Lau@gmail.com>";

struct AppOptions
{
    char        vmajor;
    char        vminor;
    std::string date;
    std::string inFile;
    bool        bCaseSensitive;
};

static AppOptions appOptions =
{
    1,                    // vmajor         (hard-coded)
    0,                    // vminor         (hard-coded)
    __DATE__" "__TIME__,  // date           (hard-coded)
    "",                   // inFile         (command-line settable)
    false                 // bCaseSensitive (command-line settable)
};

static struct argp_option appArgpOptions[] =
{
    {"inFile",        'i', "INPUT_FILE", 0, "Input file",     0},
    {"caseSensitive", 'c', NULL,         0, "Case sensitive", 0},
    {0}
};

static void printVersion
(
    FILE *              stream,
    struct argp_state * state __attribute__((unused))
)
{
    if (NULL != stream)
    {
        fprintf(stream, "%s v%d.%d %s\n", g_strAppName.c_str(),
                appOptions.vmajor, appOptions.vminor, appOptions.date.c_str());
    }
}

static error_t parseOpt
(
    int                 key,
    char *              arg,
    struct argp_state * state
)
{
    if (NULL == state)
    {
        return EINVAL;
    }

    AppOptions * arguments = static_cast<AppOptions *>(state->input);

    switch (key)
    {
        case 'i':
            arguments->inFile = arg;
            break;

        case 'c':
            arguments->bCaseSensitive = true;
            break;

        case ARGP_KEY_ARG:
            argp_error(state, "Too many arguments!");
            break;

        case ARGP_KEY_END:
            break;

        default:
            return ARGP_ERR_UNKNOWN;
    }

    return 0;
}

static struct argp argp = {appArgpOptions, parseOpt, "", "", 0, 0, 0};

int main(int argc, char ** argv)
{
    argp_program_version_hook = printVersion;

    if (argp_parse(&argp, argc, argv, 0, 0, &appOptions))
    {
        return -1;
    }

    // Do something with appOptions

    return 0;
}
}}}

= Reference =

  * [http://www.gnu.org/s/libc/manual/html_node/Argp.html Argp - The GNU C Library]